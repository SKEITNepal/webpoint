import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React, { useRef, useState, useEffect } from 'react';
import useSWR from 'swr'


import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';
import Form from 'react-bootstrap/Form';
import InputGroup from 'react-bootstrap/InputGroup';
import FloatingLabel from 'react-bootstrap/FloatingLabel';
import Row from 'react-bootstrap/Row';


export default function Home() {

  const defaultError = {
    error: false,
    code: 'UNKNOWN',
    message: 'Unknown Error',
  }

  const defaultFormData = {
    title: null,
    desc: null,
    date: null
  }
  const defaultpage = 1;
  const defaultItems = 10;

  //create
  const [formData, setFormData] = useState(defaultFormData);

  //pages
  const [page, setPage] = useState(defaultpage);
  const [error, setError] = useState(defaultError)
  const [loading, setLoading] = useState(false);

  //filter states
  const [startDate, setStartDate] = useState(false);
  const [endDate, setEndDate] = useState(false);

  let journals = [];
  let count = 0;

  const fetcher = (query) => fetch('http://localhost:3000/api/graphql', {
    method: 'POST',
    headers: {
      'Content-type': 'application/json',
    },
    body: JSON.stringify({ query }),
  }).then((res) => res.json())
  .then((json) => json.data);


  try{
    //setLoading(true);
    useEffect(()=>{setLoading(true)},[])

    const { data, read_error } = useSWR(`query{count, journals(limit: ${defaultItems}, skip: ${(page - 1)*defaultItems}){id,title,desc,date}}`, fetcher)

    journals = data.journals;
    count = data.count;

    useEffect(()=>{if(journals.length) setLoading(false)},[data])

    if(!!read_error) new Error(read_error);

    } catch (e) {
      useEffect(()=>{
        setError({
          ...defaultError,
          error: true,
          code: e.code,
          message: e.message
      });
        setLoading(false)
      },[e])
    }

    console.log({loading});



  const getFormattedDate = (date) =>{
    const f_date = new Date(date);
    return f_date.getFullYear() + '-' + f_date.getMonth()+'-'+f_date.getDate()
  }



  //create form
  const [validated, setValidated] = useState(false);

  const handleSubmit = async (event) => {
    const form = event.currentTarget;
    if (form.checkValidity() === false) {
      event.preventDefault();
      event.stopPropagation();
    }

    // setValidated(true);
    // if(!!form[0].value && !!form[1].value && !!form[2].value){
    //   setValidated(true);
    // }
    event.preventDefault();

    if(form.checkValidity()){
      const title = form[0]?.value;
      const desc = form[1]?.value;
      const date = new Date(form[2]?.value).toISOString();
      
      setLoading(true);
      
      const create_return = await fetcher(`mutation{ 
        postJournal(title: "${title}", desc: "${desc}", date: "${date}"){
        id, title, desc, date }}`);
      
      setLoading(false);
      if(create_return?.postJournal?.id){
        form.reset();
        event.stopPropagation();
        // return null;
      }
    }

    

    

  };


  return (
    <div className={styles.container}>
      <Head>
        <title>Webpoint</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className={styles.create_form}>
        <h1 className={styles.title}>
          Create new Journal: 
        </h1>
        <div className={styles.form}>
        <Form noValidate validated={validated} onSubmit={handleSubmit} style={{width: '100%'}} >
        <Row className="mb-3">
          <Form.Group as={Col} md="8" controlId="validationCustom01">
          <FloatingLabel controlId='title' label="Title">
            <Form.Control
              required
              type="text"
              placeholder="First name"
            />
            <Form.Control.Feedback type='invalid'>Title Can not be empty</Form.Control.Feedback>
            </FloatingLabel>
          </Form.Group>
        </Row>
        <Row className="mb-3">
          <Form.Group as={Col} md="8" controlId="validationCustom02">
          <FloatingLabel controlId='desc' label="Description">
            <Form.Control
              required
              type="text"
              placeholder="Last name"
              as="textarea"
            />
            <Form.Control.Feedback type='invalid'>Description can not be empty!!</Form.Control.Feedback>
            </FloatingLabel>
          </Form.Group>
        </Row>
        <Row className="mb-3">
          <Form.Group as={Col} md="8" controlId="validationCustom03">
            <FloatingLabel controlId='date' label="Date">
            <Form.Control
                required
                type="date"
                name="datepic"
                placeholder="DateRange"
            />
            <Form.Control.Feedback type='invalid'>Date Can not be empty!</Form.Control.Feedback>
            </FloatingLabel>
          </Form.Group>
        </Row>
        <Button type="submit">Create Journal</Button>
      </Form>
      </div>
    </div>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Journals: 
        </h1>
        <div className={styles.grid}>
          
          {journals.length > 0 && !loading && journals.map(journal =>{
            return <a
                  href="#"
                  className={styles.card}
                  key={journal?.id}
                >
                  <h2>{journal?.title}</h2>
                  <p>{journal?.desc}</p>
                  <p className={styles.date}>{getFormattedDate(journal?.date)}</p>
                </a>
          })

          }
        </div>
      </main>
      <div className={styles.pagination}>
          { Array(parseInt(count / defaultItems) + 1).fill().map((page , index)=>{
            return <button value={index+1} key={index+1} onClick={()=>{setPage(index+1)}} focus={index + 1 === page ? "true" : undefined} disabled={index + 1 === page }>{index+1}</button>
          })
          }
      </div>
    </div>
  )
}
